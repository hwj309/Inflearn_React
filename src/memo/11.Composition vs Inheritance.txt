[Composition vs Inheritance]

- Composition(구성, 합성)
    : 여러 개의 컴포넌트를 합쳐서 새로운 컴포는터를 만드는것

    Composition 이라 해서 무작적 컴포넌트들을 붙이는게 아니라 여러개의 컴포넌트를 어떻게 조합할지 고민이 필요하다.
    조합 방법에 따라 Composition 사용 기법이 나뉘어진다.

    - Composition 방법
        1. Containment
            : 하위 컴포넌트를 포함하는 형태의 합성 방법.
              Sidebar나  Dialog 같은 Box 형태의 컴포넌트는 자신의 하위 컴포넌트를 미리 알 수 없다.
              따라서 이런 Box 형태의 컴포넌트를 만들때 주로 사용한다.

            - 사용방법
                : children이라는 prop을 사용해서 조합!
            
            - ex) children prop을 사용한 FancyBorder 컴포넌트
                function FancyBorder(props) {
                    return (
                        <div className={'FancyBorder FancyBorder-' + props.color}>
                            // 해당 컴포넌트의 하위 컴포넌트가 모두 children으로 들어오게 됨
                            {props.children}
                        </div>
                    );
                }
            
            - 여러 개의 children 집합이 필요한 경우는 어떻게 할까?
                : 이런 경우 별도로 props를 정의하여 각각 원하는 컴포넌트를 넣어주면 됨

                -ex)
                    function Splitpane(props) {
                        return (
                            <div className="SplitPane">
                                <div className="SplitPane-left">
                                    {props.left}
                                </div>
                                <div className="SplitPane-light">
                                    {props.light}
                                </div>
                            </div>
                        );
                    }

                    function App(props) {
                        return (
                            <Splitpane
                                left={
                                    <Contacts />
                                }
                                left={
                                    <Chat />
                                }
                            />
                        );
                    }

        2. Specialization
            : 범용적인 개념을 구별이 되도록 구체화한 것이다.
               기존의 객체지향형 언어에서는 상속(Inheritance)을 사용하여 Specializtion을 구현했다.
               리액트에서는 합성(Composition)을 사용하여 Specialization을 구현한다.

            - ex)
                function Dialog(props) {
                    return (
                        <FancyBord color="blue">
                            <h1 className="Dialog-title">
                                {props.title}
                            </h1>
                            <p className="Dialog-message">
                                {props.message}
                            </p>
                        />
                    );
                }

                // title과 message의 값에 따라서 경고메시지가 될수 있고 알림메시지가 될 수 도 있다.
                function WelcomeDialog(props) {
                    return (
                        <Dialog
                            title="제목"
                            message="메시지"
                        />
                    )
                }

        ※ Composition과 Specialization을 동시에 쓸 수 있다.
        ※ 다양하고 복잡한 컴포넌트를 효율적으로 개발 할 수 있다.
              
    - Inheritance(상속)
        : 다른 컴포넌트로부터 상속을 받아서 새로운 컴포넌트를 만드는 것.
           Inheritance를 통해서 개발 하기 보다는 Composition을 사용하여 개발하는게 더 좋은 방법이다.
    
    
    ※ 복잡한 컴포넌트를 쪼개서 여러 개의 컴포넌트로 만들고, 만든 컴포넌트들을 조합해서 새로운 컴포넌트를 만들자!!
    
    
